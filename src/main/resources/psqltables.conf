CREATE TABLE Users
(
    id SERIAL PRIMARY KEY,
    firstName VARCHAR(30) NOT NULL,
    lastName VARCHAR(30) NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,
    username VARCHAR(20) UNIQUE NOT NULL,
    hashCombine VARCHAR(60) NOT NULL,
    isActive BOOLEAN DEFAULT TRUE,
    createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE PlaidLink
(
    id SERIAL PRIMARY KEY,
    userID INT NOT NULL,
    access_token VARCHAR(255) NOT NULL,
    item_id VARCHAR(255) NOT NULL,
    institution_name VARCHAR(255) NOT NULL,
    createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,

    FOREIGN KEY (userID) REFERENCES Users(userID),
    UNIQUE(userID, item_id)
);

CREATE TABLE Transactions
(
    transactionId VARCHAR(255) PRIMARY KEY,
    acctId VARCHAR(255) NOT NULL,
    amount DECIMAL(10, 3) NOT NULL,
    description VARCHAR(50),
    posted Date NOT NULL,
    currencycode VARCHAR(5),
    categoryId VARCHAR(50),
    merchantName VARCHAR(75),
    pending BOOLEAN,
    authorizeddate Date NOT NULL,
    createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    logo VARCHAR(100),
    FOREIGN KEY (acctId) REFERENCES Accounts(accountId),
    FOREIGN KEY (categoryId) REFERENCES Categories(id)
);

CREATE TYPE transaction_type AS ENUM('outflowStreams', 'inflowStreams');

CREATE TABLE RecurringTransactions
(
    rId SERIAL PRIMARY KEY,
    userId INT NOT NULL,
    accountId VARCHAR(50) NOT NULL,
    streamId VARCHAR(50) NOT NULL,
    categoryId VARCHAR(50) NOT NULL,
    description VARCHAR(255) NOT NULL,
    merchantName VARCHAR(255) NOT NULL,
    firstDate Date NOT NULL,
    lastDate Date NOT NULL,
    frequency VARCHAR(50),
    averageAmount DECIMAL(10, 3) NOT NULL,
    lastAmount DECIMAL(10, 3) NOT NULL,
    active BOOLEAN DEFAULT TRUE,
    type VARCHAR(25),
    FOREIGN KEY (userId) REFERENCES Users(id),
    FOREIGN KEY (accountId) REFERENCES Accounts(accountId),
    FOREIGN KEY (categoryId) REFERENCES Categories(categoryId)
);

CREATE TABLE RecurringTransactionsLink
(
    id SERIAL PRIMARY KEY,
    recurringTransactionId INT,
    transactionId VARCHAR(50),
    FOREIGN KEY (recurringTransactionId) REFERENCES RecurringTransactionStreams(rId),
    FOREIGN KEY (transactionId) REFERENCES Transactions(transactionId)
);

CREATE TABLE Categories
(
    categoryId VARCHAR(50) PRIMARY KEY,
    name VARCHAR(225) NOT NULL,
    description TEXT,
    type VARCHAR(20),
    icon VARCHAR(255),
    is_active BOOLEAN DEFAULT TRUE,
    is_custom BOOLEAN DEFAULT FALSE,
    createdby BIGINT,
    createdat TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE User_Categories
(
    id BIGSERIAL,
    userid INT NOT NULL,
    categoryid INT NOT NULL,
    createdat TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,

    PRIMARY KEY(id),
    UNIQUE(userid, categoryid),
    FOREIGN KEY (userid) REFERENCES Users(id),
    FOREIGN KEY (categoryid) REFERENCES Categories(id)
);

CREATE TABLE Transaction_Categories
(
    transactionid VARCHAR(255) NOT NULL,
    categoryid VARCHAR(255) NOT NULL,
    FOREIGN KEY (transactionid) REFERENCES Transactions(id),
    FOREIGN KEY (categoryid) REFERENCES Categories(id),
    PRIMARY KEY(transactionid, categoryid)
);

CREATE TABLE Accounts
(
    accountId VARCHAR(255) PRIMARY KEY,
    userId INT NOT NULL,
    accountName VARCHAR(50) NOT NULL,
    officialName VARCHAR(50),
    balance DECIMAL(10, 3) NOT NULL,
    type VARCHAR(20),
    subType VARCHAR(50),
    mask VARCHAR(4) NOT NULL,
    FOREIGN KEY (userId) REFERENCES Users(userId)
);

// OLD BUDGETS table
CREATE TABLE Budgets
(
    budgetId SERIAL PRIMARY KEY,
    userid INT NOT NULL,
    budgetName VARCHAR(225),
    budgetDescription VARCHAR(225),
    totalBudgetAmount DECIMAL(10, 2) NOT NULL,
    actualAllocationAmount DECIMAL(10, 2),
    savingsProgress DECIMAL(10, 3),
    totalMonthsToSave INT,
    budgetMode ENUM ('CONTROLLED_SPENDING', 'SAVINGS_PLAN'),
    period ENUM ('DAILY', 'WEEKLY', 'MONTHLY', 'BIWEEKLY', 'QUARTERLY', 'SEMIANNUAL', 'BIMONTHLY', 'ANNUAL'),
    monthlyIncome DECIMAL(10, 2) NOT NULL,
    budgetStartDate Date NOT NULL,
    budgetEndDate Date NOT NULL,
    createdDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    lastUpdatedDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,

    FOREIGN KEY (userid) REFERENCES Users(id)
);

// New Budgets TABLE
CREATE TABLE Budgets
(
    budgetId SERIAL PRIMARY KEY,
    userId INT NOT NULL,
    budgetName VARCHAR(225),
    budgetDescription VARCHAR(225),
    budgetActualAmount DECIMAL(10, 3),
    budgetStartDate DATE NOT NULL,
    budgetEndDate DATE NOT NULL,
    budgetMode ENUM ('')
    monthlyIncome DECIMAL(10, 3),
    periodType VARCHAR(50) NOT NULL,
    status VARCHAR(50) DEFAULT 'Active',
    FOREIGN KEY (userId) REFERENCES Users(id)
);

CREATE TABLE BudgetSchedules
(
   id SERIAL PRIMARY KEY,
   sub_budgetid INT NOT NULL UNIQUE,
   startDate DATE NOT NULL,
   endDate DATE NOT NULL,
   scheduleRange VARCHAR(67),
   totalPeriods INT,
   periodType VARCHAR(50) NOT NULL,
   status VARCHAR(50) DEFAULT 'ACTIVE',
   createdDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,

   FOREIGN KEY (budgetId) REFERENCES Budgets(budgetId),
   CONSTRAINT unique_budget_schedule UNIQUE (budgetId)
);

CREATE TABLE BudgetScheduleRanges
(
    id SERIAL PRIMARY KEY,
    scheduleId BIGINT NOT NULL,
    rangeStart DATE NOT NULL,
    rangeEnd DATE NOT NULL,
    totalDays INT NOT NULL,
    budgetedAmount DECIMAL(10, 3) NOT NULL,
    spentOnRange DECIMAL(10, 3) NOT NULL,
    rangeType VARCHAR(50),

    FOREIGN KEY (scheduleId) REFERENCES BudgetSchedules(scheduleId)
);

CREATE TABLE SubBudgets
(
    id SERIAL PRIMARY KEY,
    budgetId INT NOT NULL UNIQUE,
    subBudgetName VARCHAR(255),
    allocatedAmount DECIMAL(10, 2),
    spentOnBudget DECIMAL(10, 2),
    subSavingsTarget DECIMAL(10, 2),
    subSavingsAmount DECIMAL(10, 2),
    startDate DATE,
    endDate DATE,
    isActive boolean DEFAULT TRUE,
    FOREIGN KEY (budgetId) REFERENCES budgets(budgetId)
);

CREATE TABLE budget_schedule_mapping (
    budgetId BIGINT NOT NULL,
    scheduleId BIGINT NOT NULL,
    PRIMARY KEY (budgetId, scheduleId),
    FOREIGN KEY (budgetId) REFERENCES budgets(budgetId),
    FOREIGN KEY (scheduleId) REFERENCES budgetSchedules(scheduleId)
);

CREATE TABLE sub_budget_mapping
(
    budgetId BIGINT NOT NULL,
    subBudgetId BIGINT NOT NULL,
    PRIMARY KEY (budgetId, subBudgetId),
    FOREIGN KEY (budgetId) REFERENCES budgets(budgetId),
    FOREIGN KEY (subBudgetId) REFERENCES SubBudgets(id)
);

CREATE TABLE sub_budget_schedule_mapping
(
    subBudgetId BIGINT NOT NULL,
    scheduleId BIGINT NOT NULL,
    PRIMARY KEY (subBudgetId, scheduleId),
    FOREIGN KEY (subBudgetId) REFERENCES subBudgets(id),
    FOREIGN KEY (scheduleId) REFERENCES budgetSchedules(id)
);

CREATE TABLE ControlledSpendingCategories
(
    id SERIAL PRIMARY KEY,
    budgetId INT NOT NULL,
    categoryName VARCHAR(100) NOT NULL,
    allocatedAmount DECIMAL(10, 2),
    monthlySpendingLimit DECIMAL(10, 2),
    currentSpending DECIMAL(10, 2),
    isFixedExpense BOOLEAN DEFAULT FALSE,
    isActive BOOLEAN DEFAULT TRUE,
    priority INT,
    createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (budgetId) REFERENCES Budgets(budgetId)
);

CREATE TABLE CategoryRules
(
    id BIGSERIAL PRIMARY KEY,
    userId INT,
    categoryId VARCHAR(255),
    merchantPattern VARCHAR(255),
    descriptionPattern VARCHAR(255),
    priority INT,
    frequency VARCHAR(50),
    transaction_type VARCHAR(50),
    isRecurring BOOLEAN DEFAULT FALSE,
    isActive BOOLEAN DEFAULT TRUE,

    FOREIGN KEY (userId) REFERENCES Users(id),
    FOREIGN KEY (categoryId) REFERENCES Categories(categoryId)
);

CREATE TABLE TransactionCategories_Transactions (
    transactionCategory_id BIGINT,
    transaction_id VARCHAR(255),
    PRIMARY KEY (transactionCategory_id, transaction_id),
    FOREIGN KEY (transactionCategory_id) REFERENCES TransactionCategories(id),
    FOREIGN KEY (transaction_id) REFERENCES Transactions(transactionId)
);

CREATE TABLE TransactionCategories
(
    id BIGSERIAL PRIMARY KEY,
    sub_budgetid INT NOT NULL,
    categoryId VARCHAR(50) NOT NULL,
    budgetedAmount DECIMAL(10, 2),
    actual DECIMAL(10, 2),
    isActive BOOLEAN DEFAULT TRUE,
    startDate DATE,
    endDate DATE,
    overspendingAmount DECIMAL(10, 2),
    isOverSpent BOOLEAN DEFAULT FALSE,

    createdAt TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updatedAt TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,

    FOREIGN KEY (sub_budgetid) REFERENCES SubBudgets(id),
    FOREIGN KEY (categoryId) REFERENCES Categories(categoryId)
);

CREATE TABLE BudgetGoals
(
    id SERIAL PRIMARY KEY,
    budgetId INT NOT NULL,
    goalName VARCHAR(255) NOT NULL,
    goalDescription VARCHAR(255),
    goalType VARCHAR(50) NOT NULL,
    targetAmount DECIMAL(10, 2),
    monthlyAllocation DECIMAL(10, 2),
    currentSavings DECIMAL(10, 2),
    savingsFrequency VARCHAR(50),
    createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    status VARCHAR(20) DEFAULT 'In Progress',
    FOREIGN KEY (budgetId) REFERENCES Budgets(budgetId)
);


CREATE TABLE Budget_Transactions
(
    id SERIAL,
    budgetId INT NOT NULL,
    transactionId VARCHAR(255) NOT NULL,

    PRIMARY KEY(id),
    UNIQUE(budgetId, transactionid),
    FOREIGN KEY (budgetId) REFERENCES Budgets(budgetId),
    FOREIGN KEY (transactionId) REFERENCES Transactions(transactionId)
);

CREATE TABLE User_Category_Rules
(
    id SERIAL PRIMARY KEY,
    userId INT,
    categoryId VARCHAR(255),
    merchantPattern VARCHAR(255),
    descriptionPattern VARCHAR(255),
    minAmount DECIMAL(10, 2),
    maxAmount DECIMAL(10, 2),
    type VARCHAR(50),
    isRecurring BOOLEAN DEFAULT FALSE
);

CREATE OR REPLACE FUNCTION getCategoryName(categoryName VARCHAR(255))
    RETURNS VARCHAR(255) AS $$
BEGIN
    RETURN (
        CASE
            WHEN categoryName = 'Supermarkets and Groceries' THEN 'Groceries'
            WHEN categoryName = 'Gas Stations' THEN 'Gas'
            WHEN categoryName = 'Payroll' THEN 'Income'
            WHEN categoryName = 'Computers and Electronics' THEN 'Electronics'
            WHEN categoryName IN ('Credit Card', 'Subscription', 'Credit', 'Third Party') THEN 'Payments'
            WHEN categoryName = 'Gyms and Fitness Centers' THEN 'Fitness'
            WHEN categoryName IN ('Glasses and Optometrist', 'Pharmacies') THEN 'Health'
            ELSE categoryName
            END
        );
END;
$$ LANGUAGE plpgsql;
